{"ast":null,"code":"var _jsxFileName = \"/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport styled from 'styled-components';\nimport { useEffect, useRef } from 'react';\n\nconst Collections3D = () => {\n  const mountScene = useRef();\n  useEffect(() => {\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera(100, 500 / 500, 0.1, 1000);\n    let renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(500, 500);\n    mountScene.current.appendChild(renderer.domElement); //CUBES\n\n    let geoCubeCenter = new THREE.BoxGeometry(1, 1, 1);\n    let geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n    let geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n    geoCubeTopLeft.translate(-4, 4, 0);\n    geoCubeBottomRight.translate(4, -4, 0);\n    let material = new THREE.MeshLambertMaterial({\n      color: 0xC8C8C8\n    });\n    let centerCube = new THREE.Mesh(geoCubeCenter, material);\n    let topLeftCube = new THREE.Mesh(geoCubeTopLeft, material);\n    let bottomRightCube = new THREE.Mesh(geoCubeBottomRight, material);\n    scene.add(centerCube);\n    scene.add(topLeftCube);\n    scene.add(bottomRightCube); //SPHERES\n\n    let geoSphereLeft = new THREE.SphereGeometry(.7, 30, 30);\n    let sphereLeft = new THREE.Mesh(geoSphereLeft, material);\n    geoSphereLeft.translate(-4, 0, 0);\n    sphereLeft.scale.x = .8;\n    scene.add(sphereLeft);\n    let light = new THREE.DirectionalLight(0xffffff);\n    light.position.set(1, 0, 1).normalize(); // soft white light\n\n    scene.add(light);\n    renderer.setClearColor(0xfffff, 0); // white background - replace ffffff with any hex color\n\n    camera.position.z = 5;\n\n    let animate = function () {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, []);\n  return __jsx(CollectionsStage, {\n    ref: mountScene,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  });\n};\n\nconst CollectionsStage = styled.div.withConfig({\n  displayName: \"Collections3D__CollectionsStage\",\n  componentId: \"sc-1cdbw0c-0\"\n})([\"position:relative;top:50%;transform:translatey(-50%);> canvas{max-height:500px;max-width:500px;}\"]);\nexport default Collections3D;","map":{"version":3,"sources":["/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx"],"names":["THREE","styled","useEffect","useRef","Collections3D","mountScene","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","geoCubeCenter","BoxGeometry","geoCubeTopLeft","geoCubeBottomRight","translate","material","MeshLambertMaterial","color","centerCube","Mesh","topLeftCube","bottomRightCube","add","geoSphereLeft","SphereGeometry","sphereLeft","scale","x","light","DirectionalLight","position","set","normalize","setClearColor","z","animate","requestAnimationFrame","render","CollectionsStage","div"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport styled from 'styled-components'\nimport { useEffect, useRef } from 'react'\n\nconst Collections3D = () => {\n\n    const mountScene: {current: any} = useRef();\n\n    useEffect(() => {\n        let scene = new THREE.Scene();\n        let camera = new THREE.PerspectiveCamera( 100, 500/500, 0.1, 1000 );\n        let renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n        renderer.setSize( 500,  500);\n        mountScene.current.appendChild( renderer.domElement );\n        //CUBES\n        let geoCubeCenter = new THREE.BoxGeometry(1,1, 1 );\n        let geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n        let geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n\n        geoCubeTopLeft.translate(-4, 4, 0);\n        geoCubeBottomRight.translate(4, -4, 0);\n\n\n        let material = new THREE.MeshLambertMaterial( { color: 0xC8C8C8 } );\n        let centerCube = new THREE.Mesh( geoCubeCenter, material );\n        let topLeftCube = new THREE.Mesh( geoCubeTopLeft, material );\n        let bottomRightCube = new THREE.Mesh( geoCubeBottomRight, material );\n        scene.add( centerCube );\n        scene.add( topLeftCube );\n        scene.add( bottomRightCube );\n\n        //SPHERES\n        let geoSphereLeft = new THREE.SphereGeometry(.7, 30, 30);\n        let sphereLeft = new THREE.Mesh( geoSphereLeft, material );\n        geoSphereLeft.translate(-4, 0, 0);\n        sphereLeft.scale.x = .8;\n\n        scene.add( sphereLeft );\n\n\n        let light = new THREE.DirectionalLight(0xffffff);\n        light.position.set(1, 0, 1).normalize(); // soft white light\n        scene.add( light );\n        \n        renderer.setClearColor( 0xfffff, 0 ); // white background - replace ffffff with any hex color\n\n        camera.position.z = 5;\n        let animate = function () {\n          requestAnimationFrame( animate );\n          \n          renderer.render( scene, camera );\n        };\n        animate();\n    },[])\n\n    return (\n        <CollectionsStage ref={mountScene}>\n        </CollectionsStage>\n    )\n}\n\nconst CollectionsStage = styled.div`\n    position: relative;\n    top: 50%;\n    transform: translatey(-50%);\n    > canvas {\n        max-height: 500px;\n        max-width: 500px; \n    }\n\n`\n\nexport default(Collections3D)"]},"metadata":{},"sourceType":"module"}