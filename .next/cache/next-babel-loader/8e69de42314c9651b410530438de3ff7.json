{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport styled from 'styled-components';\nimport { useState, useEffect, useRef } from 'react';\n\nvar Collections3D = function Collections3D() {\n  var _useState = useState(false),\n      targeted = _useState[0],\n      setTargeted = _useState[1];\n\n  var mountScene = useRef();\n  useEffect(function () {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(100, 500 / 500, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(500, 500);\n    mountScene.current.appendChild(renderer.domElement); //CUBES\n\n    var geoCubeCenter = new THREE.BoxGeometry(1, 1, 1);\n    var geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n    var geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n    geoCubeTopLeft.translate(-4, 4, 0);\n    geoCubeBottomRight.translate(4, -4, 0);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0xC8C8C8\n    });\n    var centerCube = new THREE.Mesh(geoCubeCenter, material);\n    var topLeftCube = new THREE.Mesh(geoCubeTopLeft, material);\n    var bottomRightCube = new THREE.Mesh(geoCubeBottomRight, material);\n    scene.add(centerCube);\n    scene.add(topLeftCube);\n    scene.add(bottomRightCube); //SPHERES\n\n    var geoSphereLeft = new THREE.CylinderGeometry(.65, .65, .001, 32);\n    var sphereLeft = new THREE.Mesh(geoSphereLeft, material);\n    geoSphereLeft.translate(-4, 0, .02);\n    sphereLeft.rotation.x += 1.6;\n    scene.add(sphereLeft);\n    var geoSphereRight = new THREE.CylinderGeometry(.65, .65, .001, 32);\n    var sphereRight = new THREE.Mesh(geoSphereRight, material);\n    geoSphereRight.translate(4, 0, .02);\n    sphereRight.rotation.x += -1.6;\n    scene.add(sphereRight);\n    var geoSphereTop = new THREE.CylinderGeometry(.65, .65, .001, 32);\n    var sphereTop = new THREE.Mesh(geoSphereTop, material);\n    geoSphereTop.translate(0, 0, 4);\n    sphereTop.rotation.x += -1.6;\n    scene.add(sphereTop);\n    var geoSphereBottom = new THREE.CylinderGeometry(.65, .65, .001, 32);\n    var sphereBottom = new THREE.Mesh(geoSphereBottom, material);\n    geoSphereBottom.translate(0, 0, -4);\n    sphereBottom.rotation.x += -1.6;\n    scene.add(sphereBottom); //Triangles \n\n    var triangleTop = new THREE.Geometry();\n    triangleTop.vertices.push(new THREE.Vector3(-.7, 0, 0.1));\n    triangleTop.vertices.push(new THREE.Vector3(.7, 0, 0.1));\n    triangleTop.vertices.push(new THREE.Vector3(0, 1.3, 0.1));\n    triangleTop.faces.push(new THREE.Face3(0, 1, 2));\n    var mat = new THREE.MeshBasicMaterial({\n      color: 0xC8C8C8,\n      side: THREE.DoubleSide\n    });\n    triangleTop.translate(3.9, 3.2, 0);\n    var mesh = new THREE.Mesh(triangleTop, mat);\n    scene.add(mesh);\n    var geoTriangleBottom = new THREE.Geometry();\n    geoTriangleBottom.vertices.push(new THREE.Vector3(-.7, 0, 0.1));\n    geoTriangleBottom.vertices.push(new THREE.Vector3(.7, 0, 0.1));\n    geoTriangleBottom.vertices.push(new THREE.Vector3(0, 1.3, 0.1));\n    geoTriangleBottom.faces.push(new THREE.Face3(0, 1, 2));\n    var mat = new THREE.MeshBasicMaterial({\n      color: 0xC8C8C8,\n      side: THREE.DoubleSide\n    });\n    geoTriangleBottom.translate(-3.9, -4.6, 0);\n    var triangleBottom = new THREE.Mesh(geoTriangleBottom, mat);\n    scene.add(triangleBottom); // let light = new THREE.DirectionalLight(0xffffff);\n    // light.position.set(1, 0, 1).normalize(); // soft white light\n    // scene.add( light );\n\n    renderer.setClearColor(0xfffff, 0); // white background - replace ffffff with any hex color\n\n    camera.position.z = 5;\n    var raycaster = new THREE.Raycaster();\n    var mouse = new THREE.Vector2();\n\n    var animate = function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    function render() {\n      raycaster.setFromCamera(mouse, camera); // calculate objects intersecting the picking ray\n\n      var intersects = raycaster.intersectObjects(scene.children);\n\n      for (var i = 0; i < intersects.length; i++) {\n        console.log(intersects[i]);\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n\n    window.addEventListener('mousemove', onMouseMove, false);\n  }, []);\n  mountScene.current.child().addEventListener('hover', setTargeted(true), false);\n  return __jsx(CollectionsStage, {\n    ref: mountScene,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  });\n};\n\nvar CollectionsStage = styled.div.withConfig({\n  displayName: \"Collections3D__CollectionsStage\",\n  componentId: \"sc-1cdbw0c-0\"\n})([\"position:relative;top:50%;transform:translatey(-50%);> canvas{max-height:100px;max-width:100px;}\"]);\nexport default Collections3D;","map":{"version":3,"sources":["/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx"],"names":["THREE","styled","useState","useEffect","useRef","Collections3D","targeted","setTargeted","mountScene","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","geoCubeCenter","BoxGeometry","geoCubeTopLeft","geoCubeBottomRight","translate","material","MeshBasicMaterial","color","centerCube","Mesh","topLeftCube","bottomRightCube","add","geoSphereLeft","CylinderGeometry","sphereLeft","rotation","x","geoSphereRight","sphereRight","geoSphereTop","sphereTop","geoSphereBottom","sphereBottom","triangleTop","Geometry","vertices","push","Vector3","faces","Face3","mat","side","DoubleSide","mesh","geoTriangleBottom","triangleBottom","setClearColor","position","z","raycaster","Raycaster","mouse","Vector2","animate","requestAnimationFrame","render","setFromCamera","intersects","intersectObjects","children","i","length","console","log","onMouseMove","event","clientX","window","innerWidth","y","clientY","innerHeight","addEventListener","child","CollectionsStage","div"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport styled from 'styled-components'\nimport { useState, useEffect, useRef } from 'react'\nimport { Vector2 } from 'three';\nimport { render } from 'react-dom';\n\nconst Collections3D = () => {\n\n    const [targeted, setTargeted] = useState(false);\n    const mountScene: {current: any} = useRef();\n\n    useEffect(() => {\n        let scene = new THREE.Scene();\n        let camera = new THREE.PerspectiveCamera( 100, 500/500, 0.1, 1000 );\n        let renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n        renderer.setSize( 500,  500);\n        mountScene.current.appendChild( renderer.domElement );\n        //CUBES\n        let geoCubeCenter = new THREE.BoxGeometry(1,1, 1 );\n        let geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n        let geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n\n        geoCubeTopLeft.translate(-4, 4, 0);\n        geoCubeBottomRight.translate(4, -4, 0);\n\n\n        let material = new THREE.MeshBasicMaterial( { color: 0xC8C8C8 } );\n        let centerCube = new THREE.Mesh( geoCubeCenter, material );\n        let topLeftCube = new THREE.Mesh( geoCubeTopLeft, material );\n        let bottomRightCube = new THREE.Mesh( geoCubeBottomRight, material );\n        scene.add( centerCube );\n        scene.add( topLeftCube );\n        scene.add( bottomRightCube );\n\n        //SPHERES\n        let geoSphereLeft = new THREE.CylinderGeometry(.65,.65, .001, 32);\n        let sphereLeft = new THREE.Mesh( geoSphereLeft, material );\n        geoSphereLeft.translate(-4, 0, .02);\n        sphereLeft.rotation.x += 1.6;\n        scene.add( sphereLeft );\n\n        let geoSphereRight = new THREE.CylinderGeometry(.65,.65, .001, 32);\n        let sphereRight = new THREE.Mesh( geoSphereRight, material );\n        geoSphereRight.translate(4, 0, .02);\n        sphereRight.rotation.x += -1.6;\n        scene.add( sphereRight );\n\n        let geoSphereTop = new THREE.CylinderGeometry(.65,.65, .001, 32);\n        let sphereTop = new THREE.Mesh( geoSphereTop, material );\n        geoSphereTop.translate(0, 0, 4);\n        sphereTop.rotation.x += -1.6;\n        scene.add( sphereTop );\n\n        let geoSphereBottom = new THREE.CylinderGeometry(.65,.65, .001, 32);\n        let sphereBottom = new THREE.Mesh( geoSphereBottom, material );\n        geoSphereBottom.translate(0, 0, -4);\n        sphereBottom.rotation.x += -1.6;\n        scene.add( sphereBottom );\n\n        //Triangles \n        let triangleTop = new THREE.Geometry();\n        triangleTop.vertices.push(new THREE.Vector3(-.7,0,0.1));\n        triangleTop.vertices.push(new THREE.Vector3(.7,0,0.1));\n        triangleTop.vertices.push(new THREE.Vector3(0,1.3,0.1));\n        triangleTop.faces.push(new THREE.Face3(0,1,2));\n        var mat = new THREE.MeshBasicMaterial({color: 0xC8C8C8, side: THREE.DoubleSide})\n        triangleTop.translate(3.9,3.2, 0);\n\n        let mesh = new THREE.Mesh( triangleTop,mat);\n        scene.add(mesh);\n\n        let geoTriangleBottom = new THREE.Geometry();\n        geoTriangleBottom.vertices.push(new THREE.Vector3(-.7,0,0.1));\n        geoTriangleBottom.vertices.push(new THREE.Vector3(.7,0,0.1));\n        geoTriangleBottom.vertices.push(new THREE.Vector3(0,1.3,0.1));\n        geoTriangleBottom.faces.push(new THREE.Face3(0,1,2));\n        var mat = new THREE.MeshBasicMaterial({color: 0xC8C8C8, side: THREE.DoubleSide})\n        geoTriangleBottom.translate(-3.9,-4.6, 0);\n\n        let triangleBottom = new THREE.Mesh( geoTriangleBottom,mat);\n        scene.add(triangleBottom);\n\n\n        // let light = new THREE.DirectionalLight(0xffffff);\n        // light.position.set(1, 0, 1).normalize(); // soft white light\n        // scene.add( light );\n        \n        renderer.setClearColor( 0xfffff, 0 ); // white background - replace ffffff with any hex color\n\n        camera.position.z = 5;\n\n        let raycaster = new THREE.Raycaster();\n        let mouse = new THREE.Vector2();\n\n        let animate = function () {\n          requestAnimationFrame( animate );\n          \n          renderer.render( scene, camera );\n        };\n        animate();\n\n        function render() {\n            raycaster.setFromCamera( mouse, camera );\n\n            // calculate objects intersecting the picking ray\n            var intersects = raycaster.intersectObjects( scene.children );\n\n            for ( var i = 0; i < intersects.length; i++ ) {\n\n                console.log(intersects[i])\n\n            }\n            renderer.render(scene ,camera)\n        }\n\n\n        function onMouseMove( event: any ) {\n\n            // calculate mouse position in normalized device coordinates\n            // (-1 to +1) for both components\n        \n            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n        \n        }\n        \n\n        window.addEventListener( 'mousemove', onMouseMove, false );\n\n    },[])\n\n    mountScene.current.child().addEventListener( 'hover', setTargeted(true), false );\n\n    return (\n        <CollectionsStage  ref={mountScene}>\n        </CollectionsStage>\n    )\n}\n\nconst CollectionsStage = styled.div`\n    position: relative;\n    top: 50%;\n    transform: translatey(-50%);\n    > canvas {\n        max-height: 100px;\n        max-width: 100px; \n    }\n\n`\n\nexport default(Collections3D)"]},"metadata":{},"sourceType":"module"}