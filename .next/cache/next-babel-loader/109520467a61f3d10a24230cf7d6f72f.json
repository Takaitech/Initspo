{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport styled from 'styled-components';\nimport { useEffect, useRef } from 'react';\n\nvar Collections3D = function Collections3D() {\n  var mountScene = useRef();\n  useEffect(function () {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(1000, 1000); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    mountScene.current.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, .5, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x000000\n    });\n    var centerCube = new THREE.Mesh(geometry, material);\n    scene.add(centerCube);\n    var topLeftCube = new THREE.Mesh(geometry, material);\n    scene.add(topLeftCube);\n    topLeftCube.translate(25, 25, 0);\n    renderer.setClearColor(0xffffff); // white background - replace ffffff with any hex color\n\n    camera.position.z = 5;\n\n    var animate = function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }, []);\n  return __jsx(CollectionsStage, {\n    ref: mountScene,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  });\n};\n\nvar CollectionsStage = styled.div.withConfig({\n  displayName: \"Collections3D__CollectionsStage\",\n  componentId: \"sc-1cdbw0c-0\"\n})([\"position:relative;top:50%;transform:translatey(-50%);> canvas{max-height:100px;max-width:100px;}\"]);\nexport default Collections3D;","map":{"version":3,"sources":["/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx"],"names":["THREE","styled","useEffect","useRef","Collections3D","mountScene","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","current","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","centerCube","Mesh","add","topLeftCube","translate","setClearColor","position","z","animate","requestAnimationFrame","render","CollectionsStage","div"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAExB,MAAMC,UAA0B,GAAGF,MAAM,EAAzC;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAII,KAAK,GAAG,IAAIN,KAAK,CAACO,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIR,KAAK,CAACS,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIb,KAAK,CAACc,aAAV,CAAwB;AAACC,MAAAA,SAAS,EAAE,IAAZ;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAxB,CAAf;AACAH,IAAAA,QAAQ,CAACI,OAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAJY,CAKZ;AACA;;AACAZ,IAAAA,UAAU,CAACa,OAAX,CAAmBC,WAAnB,CAAgCN,QAAQ,CAACO,UAAzC;AACA,QAAIC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,WAAV,CAAsB,CAAtB,EAAwB,EAAxB,EAA4B,CAA5B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,UAAU,GAAG,IAAI1B,KAAK,CAAC2B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAjB;AAEAjB,IAAAA,KAAK,CAACsB,GAAN,CAAWF,UAAX;AACA,QAAIG,WAAW,GAAG,IAAI7B,KAAK,CAAC2B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAlB;AACAjB,IAAAA,KAAK,CAACsB,GAAN,CAAWC,WAAX;AACAA,IAAAA,WAAW,CAACC,SAAZ,CAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B;AACAjB,IAAAA,QAAQ,CAACkB,aAAT,CAAwB,QAAxB,EAhBY,CAgBwB;;AAEpCvB,IAAAA,MAAM,CAACwB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,SAAVA,OAAU,GAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACArB,MAAAA,QAAQ,CAACuB,MAAT,CAAiB9B,KAAjB,EAAwBE,MAAxB;AACD,KAHD;;AAIA0B,IAAAA,OAAO;AACV,GAxBQ,EAwBP,EAxBO,CAAT;AA0BA,SACI,MAAC,gBAAD;AAAkB,IAAA,GAAG,EAAE7B,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAlCD;;AAoCA,IAAMgC,gBAAgB,GAAGpC,MAAM,CAACqC,GAAV;AAAA;AAAA;AAAA,wGAAtB;AAWA,eAAelC,aAAf","sourcesContent":["import * as THREE from 'three'\nimport styled from 'styled-components'\nimport { useEffect, useRef } from 'react'\n\nconst Collections3D = () => {\n\n    const mountScene: {current: any} = useRef();\n\n    useEffect(() => {\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        var renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n        renderer.setSize( 1000, 1000 );\n        // document.body.appendChild( renderer.domElement );\n        // use ref as a mount point of the Three.js scene instead of the document.body\n        mountScene.current.appendChild( renderer.domElement );\n        var geometry = new THREE.BoxGeometry(1,.5, 1 );\n        var material = new THREE.MeshBasicMaterial( { color: 0x000000 } );\n        var centerCube = new THREE.Mesh( geometry, material );\n\n        scene.add( centerCube );\n        var topLeftCube = new THREE.Mesh( geometry, material );\n        scene.add( topLeftCube );\n        topLeftCube.translate(25, 25, 0)\n        renderer.setClearColor( 0xffffff ); // white background - replace ffffff with any hex color\n\n        camera.position.z = 5;\n        var animate = function () {\n          requestAnimationFrame( animate );\n          renderer.render( scene, camera );\n        };\n        animate();\n    },[])\n\n    return (\n        <CollectionsStage ref={mountScene}>\n        </CollectionsStage>\n    )\n}\n\nconst CollectionsStage = styled.div`\n    position: relative;\n    top: 50%;\n    transform: translatey(-50%);\n    > canvas {\n        max-height: 100px;\n        max-width: 100px; \n    }\n\n`\n\nexport default(Collections3D)"]},"metadata":{},"sourceType":"module"}