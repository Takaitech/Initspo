{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as THREE from 'three';\nimport styled from 'styled-components';\nimport { useState, useEffect, useRef } from 'react';\n\nvar Collections3D = function Collections3D() {\n  var _useState = useState(false),\n      targeted = _useState[0],\n      setTargeted = _useState[1];\n\n  var mountScene = useRef();\n  useEffect(function () {\n    var scene, camera, renderer;\n    var width = 500;\n    var height = 500;\n\n    function init() {\n      scene = new THREE.Scene();\n      camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);\n      scene.add(camera);\n      camera.position.z = 2;\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      mountScene.current.appendChild(renderer.domElement);\n      renderer.setClearColor(0xfffff, 0); // white background - replace ffffff with any hex color\n      // camera.position.z = 5;\n      //CUBES\n\n      var geoCubeCenter = new THREE.BoxGeometry(1, 1, 1);\n      var geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n      var geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n      geoCubeTopLeft.translate(-4, 4, 0);\n      geoCubeBottomRight.translate(4, -4, 0);\n      var material = new THREE.MeshBasicMaterial({\n        color: targeted ? 0x000000 : 0xC8C8C8\n      });\n      var centerCube = new THREE.Mesh(geoCubeCenter, material);\n      var topLeftCube = new THREE.Mesh(geoCubeTopLeft, material);\n      var bottomRightCube = new THREE.Mesh(geoCubeBottomRight, material);\n      scene.add(centerCube);\n      scene.add(topLeftCube);\n      scene.add(bottomRightCube); //SPHERES\n\n      var geoSphereLeft = new THREE.CylinderGeometry(.65, .65, .001, 32);\n      var sphereLeft = new THREE.Mesh(geoSphereLeft, material);\n      geoSphereLeft.translate(-4, 0, .02);\n      sphereLeft.rotation.x += 1.6;\n      scene.add(sphereLeft);\n      var geoSphereRight = new THREE.CylinderGeometry(.65, .65, .001, 32);\n      var sphereRight = new THREE.Mesh(geoSphereRight, material);\n      geoSphereRight.translate(4, 0, .02);\n      sphereRight.rotation.x += -1.6;\n      scene.add(sphereRight);\n      var geoSphereTop = new THREE.CylinderGeometry(.65, .65, .001, 32);\n      var sphereTop = new THREE.Mesh(geoSphereTop, material);\n      geoSphereTop.translate(0, 0, 4);\n      sphereTop.rotation.x += -1.6;\n      scene.add(sphereTop);\n      var geoSphereBottom = new THREE.CylinderGeometry(.65, .65, .001, 32);\n      var sphereBottom = new THREE.Mesh(geoSphereBottom, material);\n      geoSphereBottom.translate(0, 0, -4);\n      sphereBottom.rotation.x += -1.6;\n      scene.add(sphereBottom); //Triangles \n\n      var triangleTop = new THREE.Geometry();\n      triangleTop.vertices.push(new THREE.Vector3(-.7, 0, 0.1));\n      triangleTop.vertices.push(new THREE.Vector3(.7, 0, 0.1));\n      triangleTop.vertices.push(new THREE.Vector3(0, 1.3, 0.1));\n      triangleTop.faces.push(new THREE.Face3(0, 1, 2));\n      var mat = new THREE.MeshBasicMaterial({\n        color: 0xC8C8C8,\n        side: THREE.DoubleSide\n      });\n      triangleTop.translate(3.9, 3.2, 0);\n      var mesh = new THREE.Mesh(triangleTop, mat);\n      scene.add(mesh);\n      var geoTriangleBottom = new THREE.Geometry();\n      geoTriangleBottom.vertices.push(new THREE.Vector3(-.7, 0, 0.1));\n      geoTriangleBottom.vertices.push(new THREE.Vector3(.7, 0, 0.1));\n      geoTriangleBottom.vertices.push(new THREE.Vector3(0, 1.3, 0.1));\n      geoTriangleBottom.faces.push(new THREE.Face3(0, 1, 2));\n      var mat = new THREE.MeshBasicMaterial({\n        color: 0xC8C8C8,\n        side: THREE.DoubleSide\n      });\n      geoTriangleBottom.translate(-3.9, -4.6, 0);\n      var triangleBottom = new THREE.Mesh(geoTriangleBottom, mat);\n      scene.add(triangleBottom);\n    } // let light = new THREE.DirectionalLight(0xffffff);\n    // light.position.set(1, 0, 1).normalize(); // soft white light\n    // scene.add( light );\n\n\n    var raycaster = new THREE.Raycaster();\n    var mouse = new THREE.Vector2();\n\n    var animate = function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n\n    init();\n    animate();\n\n    function render() {\n      raycaster.setFromCamera(mouse, camera); // calculate objects intersecting the picking ray\n\n      var intersects = raycaster.intersectObjects(scene.children);\n\n      for (var i = 0; i < intersects.length; i++) {\n        console.log(intersects[i]);\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    function onMouseMove(event) {\n      // calculate mouse position in normalized device coordinates\n      // (-1 to +1) for both components\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n\n    window.addEventListener('mousemove', onMouseMove, false);\n  }, [targeted]);\n  return __jsx(CollectionsStage, {\n    ref: mountScene,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  });\n};\n\nvar CollectionsStage = styled.div.withConfig({\n  displayName: \"Collections3D__CollectionsStage\",\n  componentId: \"sc-1cdbw0c-0\"\n})([\"position:relative;top:50%;transform:translatey(-50%);> canvas{max-height:100px;max-width:100px;}\"]);\nexport default Collections3D;","map":{"version":3,"sources":["/Users/takaitech/Takai-Tech/initspo/src/components/Collections3D.tsx"],"names":["THREE","styled","useState","useEffect","useRef","Collections3D","targeted","setTargeted","mountScene","scene","camera","renderer","width","height","init","Scene","OrthographicCamera","add","position","z","WebGLRenderer","antialias","alpha","setSize","window","innerWidth","innerHeight","current","appendChild","domElement","setClearColor","geoCubeCenter","BoxGeometry","geoCubeTopLeft","geoCubeBottomRight","translate","material","MeshBasicMaterial","color","centerCube","Mesh","topLeftCube","bottomRightCube","geoSphereLeft","CylinderGeometry","sphereLeft","rotation","x","geoSphereRight","sphereRight","geoSphereTop","sphereTop","geoSphereBottom","sphereBottom","triangleTop","Geometry","vertices","push","Vector3","faces","Face3","mat","side","DoubleSide","mesh","geoTriangleBottom","triangleBottom","raycaster","Raycaster","mouse","Vector2","animate","requestAnimationFrame","render","setFromCamera","intersects","intersectObjects","children","i","length","console","log","onMouseMove","event","clientX","y","clientY","addEventListener","CollectionsStage","div"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport styled from 'styled-components'\nimport { useState, useEffect, useRef } from 'react'\nimport { Vector2 } from 'three';\nimport { render } from 'react-dom';\n\nconst Collections3D = () => {\n\n    const [targeted, setTargeted] = useState(false);\n    const mountScene: {current: any} = useRef();\n\n    useEffect(() => {\n\n        let scene: any, camera: any, renderer: any;\n        let width = 500;\n        let height = 500;\n\n        function init() {\n            scene = new THREE.Scene();\n            camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\n            scene.add( camera );\n            camera.position.z = 2;\n\n            renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n            renderer.setSize( window.innerWidth, window.innerHeight);\n            mountScene.current.appendChild( renderer.domElement);\n\n            renderer.setClearColor( 0xfffff, 0 ); // white background - replace ffffff with any hex color\n\n            // camera.position.z = 5;\n\n\n            //CUBES\n            let geoCubeCenter = new THREE.BoxGeometry(1,1, 1 );\n            let geoCubeTopLeft = new THREE.BoxGeometry(1, 1, .001);\n            let geoCubeBottomRight = new THREE.BoxGeometry(1, 1, .001);\n\n            geoCubeTopLeft.translate(-4, 4, 0);\n            geoCubeBottomRight.translate(4, -4, 0);\n\n\n            let material = new THREE.MeshBasicMaterial( { color: targeted ? 0x000000 : 0xC8C8C8 } );\n            let centerCube = new THREE.Mesh( geoCubeCenter, material );\n            let topLeftCube = new THREE.Mesh( geoCubeTopLeft, material );\n            let bottomRightCube = new THREE.Mesh( geoCubeBottomRight, material );\n            scene.add( centerCube );\n            scene.add( topLeftCube );\n            scene.add( bottomRightCube );\n\n            //SPHERES\n            let geoSphereLeft = new THREE.CylinderGeometry(.65,.65, .001, 32);\n            let sphereLeft = new THREE.Mesh( geoSphereLeft, material );\n            geoSphereLeft.translate(-4, 0, .02);\n            sphereLeft.rotation.x += 1.6;\n            scene.add( sphereLeft );\n\n            let geoSphereRight = new THREE.CylinderGeometry(.65,.65, .001, 32);\n            let sphereRight = new THREE.Mesh( geoSphereRight, material );\n            geoSphereRight.translate(4, 0, .02);\n            sphereRight.rotation.x += -1.6;\n            scene.add( sphereRight );\n\n            let geoSphereTop = new THREE.CylinderGeometry(.65,.65, .001, 32);\n            let sphereTop = new THREE.Mesh( geoSphereTop, material );\n            geoSphereTop.translate(0, 0, 4);\n            sphereTop.rotation.x += -1.6;\n            scene.add( sphereTop );\n\n            let geoSphereBottom = new THREE.CylinderGeometry(.65,.65, .001, 32);\n            let sphereBottom = new THREE.Mesh( geoSphereBottom, material );\n            geoSphereBottom.translate(0, 0, -4);\n            sphereBottom.rotation.x += -1.6;\n            scene.add( sphereBottom );\n\n            //Triangles \n            let triangleTop = new THREE.Geometry();\n            triangleTop.vertices.push(new THREE.Vector3(-.7,0,0.1));\n            triangleTop.vertices.push(new THREE.Vector3(.7,0,0.1));\n            triangleTop.vertices.push(new THREE.Vector3(0,1.3,0.1));\n            triangleTop.faces.push(new THREE.Face3(0,1,2));\n            var mat = new THREE.MeshBasicMaterial({color: 0xC8C8C8, side: THREE.DoubleSide})\n            triangleTop.translate(3.9,3.2, 0);\n\n            let mesh = new THREE.Mesh( triangleTop,mat);\n            scene.add(mesh);\n\n            let geoTriangleBottom = new THREE.Geometry();\n            geoTriangleBottom.vertices.push(new THREE.Vector3(-.7,0,0.1));\n            geoTriangleBottom.vertices.push(new THREE.Vector3(.7,0,0.1));\n            geoTriangleBottom.vertices.push(new THREE.Vector3(0,1.3,0.1));\n            geoTriangleBottom.faces.push(new THREE.Face3(0,1,2));\n            var mat = new THREE.MeshBasicMaterial({color: 0xC8C8C8, side: THREE.DoubleSide})\n            geoTriangleBottom.translate(-3.9,-4.6, 0);\n\n            let triangleBottom = new THREE.Mesh( geoTriangleBottom,mat);\n            scene.add(triangleBottom);\n\n        }\n\n        // let light = new THREE.DirectionalLight(0xffffff);\n        // light.position.set(1, 0, 1).normalize(); // soft white light\n        // scene.add( light );\n        \n        \n\n        let raycaster = new THREE.Raycaster();\n        let mouse = new THREE.Vector2();\n\n        let animate = function () {\n          requestAnimationFrame( animate );\n          \n          renderer.render( scene, camera );\n        };\n\n        init();\n        animate();\n\n        function render() {\n            raycaster.setFromCamera( mouse, camera );\n\n            // calculate objects intersecting the picking ray\n            var intersects = raycaster.intersectObjects( scene.children );\n\n            for ( var i = 0; i < intersects.length; i++ ) {\n\n                console.log(intersects[i])\n\n            }\n            renderer.render(scene ,camera)\n        }\n\n\n        function onMouseMove( event: any ) {\n\n            // calculate mouse position in normalized device coordinates\n            // (-1 to +1) for both components\n        \n            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n        \n        }\n        \n\n        window.addEventListener( 'mousemove', onMouseMove, false );\n       \n       \n    \n\n    },[targeted])\n\n\n    return (\n        <CollectionsStage  ref={mountScene}>\n        </CollectionsStage>\n    )\n}\n\nconst CollectionsStage = styled.div`\n    position: relative;\n    top: 50%;\n    transform: translatey(-50%);\n    > canvas {\n        max-height: 100px;\n        max-width: 100px; \n    }\n\n`\n\nexport default(Collections3D)"]},"metadata":{},"sourceType":"module"}